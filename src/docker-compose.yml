version: "3.8"
services:
  locations-db:
    image: mongo
    container_name: locations-db
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    ports:
      - 8081:8081
    volumes:
      - ../volumes/mongo:/data/db

  departure-boards-cache:
    image: redis:alpine
    container_name: departure-boards-cache
    restart: always
    environment:
      - REDIS_PASSWORD=$REDIS_PASSWORD
    ports:
      - 6379:6379
    volumes:
      - ../volumes/redis:/data

  es01:
    image: elasticsearch:$ELASTIC_VERSION
    container_name: es01
    restart: always
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
    ports:
      - 127.0.0.1:9200:9200
    volumes:
      - ../volumes/es01:/usr/share/elasticsearch/data
  kib01:
    image: kibana:$ELASTIC_VERSION
    container_name: kib01
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=$ELASTIC_PASSWORD
    ports:
      - 127.0.0.1:5601:5601
    depends_on:
      - es01

  locations-db-init:
    build:
      context: .
      dockerfile: ./Workers/Wanderlust.LocationsDbInitializer/Dockerfile
    container_name: locations-db-init
    depends_on:
      - locations-db

  wanderlust-tg-bot:
    build:
      context: .
      dockerfile: ./Wanderlust.Web/Dockerfile
    container_name: wanderlust-tg-bot
    restart: always
    ports:
      - 44383:80
    depends_on:
      locations-db-init:
        condition: service_completed_successfully
      departure-boards-cache:
        condition: service_started
